// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`ClusterComponentsStack Snapshot Tests should match the expected Terraform configuration snapshot 1`] = `
"{
  "output": {
    "admin_credentials": {
      "description": "Default admin credentials",
      "value": "zitadel-admin@zitadel.machine.127.0.0.1.sslip.io / Password1!"
    },
    "zitadel_url": {
      "description": "Zitadel Console URL",
      "value": "https://machine.127.0.0.1.sslip.io/ui/console?login_hint=zitadel-admin@zitadel.machine.127.0.0.1.sslip.io"
    }
  },
  "provider": {
    "helm": [
      {
        "kubernetes": {
          "config_context": "kind-kind",
          "config_path": "~/.kube/config"
        }
      }
    ],
    "kubernetes": [
      {
        "config_context": "kind-kind",
        "config_path": "~/.kube/config"
      }
    ],
    "null": [
      {
      }
    ]
  },
  "resource": {
    "helm_release": {
      "cert-manager": {
        "chart": "cert-manager",
        "create_namespace": true,
        "name": "cert-manager",
        "namespace": "cert-manager",
        "repository": "oci://quay.io/jetstack/charts",
        "set": [
          {
            "name": "crds.enabled",
            "value": "true"
          }
        ],
        "version": "v1.18.2",
        "wait": true
      },
      "postgresql": {
        "chart": "postgresql",
        "depends_on": [
          "helm_release.traefik"
        ],
        "name": "db",
        "namespace": "default",
        "repository": "https://charts.bitnami.com/bitnami",
        "values": [
          "https://raw.githubusercontent.com/zitadel/zitadel-charts/main/examples/4-machine-user/postgres-values.yaml"
        ],
        "version": "12.10.0",
        "wait": true
      },
      "traefik": {
        "chart": "traefik",
        "create_namespace": true,
        "depends_on": [
          "helm_release.cert-manager"
        ],
        "name": "traefik",
        "namespace": "ingress",
        "repository": "https://traefik.github.io/charts",
        "values": [
          "https://raw.githubusercontent.com/zitadel/zitadel-charts/main/examples/99-kind-with-traefik/traefik-values.yaml"
        ],
        "version": "36.3.0",
        "wait": true
      },
      "zitadel": {
        "chart": "zitadel",
        "depends_on": [
          "helm_release.postgresql"
        ],
        "name": "my-zitadel",
        "namespace": "default",
        "repository": "https://charts.zitadel.com",
        "values": [
          "https://raw.githubusercontent.com/zitadel/zitadel-charts/main/examples/4-machine-user/zitadel-values.yaml"
        ],
        "wait": true
      }
    },
    "null_resource": {
      "completion-message": {
        "depends_on": [
          "null_resource.verify-zitadel"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "echo 'Installation completed successfully!'",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "verification_dependency": "\${null_resource.verify-zitadel.id}"
        }
      },
      "configure-ssl": {
        "depends_on": [
          "null_resource.patch-ingresses"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "\\n            # Extract certificate and add to system trust store\\n            kubectl get secret zitadel-tls -n default -o jsonpath='{.data.tls\\\\.crt}' | base64 -d > /tmp/zitadel-cert.crt || true\\n            sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/zitadel-cert.crt || true\\n          ",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "patch_dependency": "\${null_resource.patch-ingresses.id}"
        }
      },
      "create-tls-resources": {
        "depends_on": [
          "null_resource.wait-for-cert-manager-crds",
          "helm_release.zitadel"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "cat <<EOF | kubectl apply -f -\\napiVersion: cert-manager.io/v1\\nkind: ClusterIssuer\\nmetadata:\\n  name: selfsigned-issuer\\nspec:\\n  selfSigned: {}\\n---\\napiVersion: cert-manager.io/v1\\nkind: Certificate\\nmetadata:\\n  name: zitadel-cert\\n  namespace: default\\nspec:\\n  secretName: zitadel-tls\\n  issuerRef:\\n    name: selfsigned-issuer\\n    kind: ClusterIssuer\\n  commonName: machine.127.0.0.1.sslip.io\\n  dnsNames:\\n  - machine.127.0.0.1.sslip.io\\nEOF",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "crd_dependency": "\${null_resource.wait-for-cert-manager-crds.id}",
          "zitadel_dependency": "\${helm_release.zitadel.id}"
        }
      },
      "extract-credentials": {
        "depends_on": [
          "null_resource.configure-ssl"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "echo 'Credential extraction would run during apply'",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "ssl_dependency": "\${null_resource.configure-ssl.id}"
        }
      },
      "patch-ingresses": {
        "depends_on": [
          "null_resource.wait-for-certificate"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "\\n            kubectl patch ingress my-zitadel -n default --type='merge' -p='{\\"spec\\":{\\"tls\\":[{\\"hosts\\":[\\"machine.127.0.0.1.sslip.io\\"],\\"secretName\\":\\"zitadel-tls\\"}]}}' || true\\n            kubectl patch ingress my-zitadel-login -n default --type='merge' -p='{\\"spec\\":{\\"tls\\":[{\\"hosts\\":[\\"machine.127.0.0.1.sslip.io\\"],\\"secretName\\":\\"zitadel-tls\\"}]}}' || true\\n          ",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "wait_dependency": "\${null_resource.wait-for-certificate.id}"
        }
      },
      "verify-zitadel": {
        "depends_on": [
          "null_resource.extract-credentials"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "echo 'Zitadel verification would run during apply'",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "credentials_dependency": "\${null_resource.extract-credentials.id}"
        }
      },
      "wait-for-cert-manager-crds": {
        "depends_on": [
          "helm_release.cert-manager"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "kubectl wait --for=condition=established --timeout=120s crd/clusterissuers.cert-manager.io || kubectl get crd clusterissuers.cert-manager.io",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "cert_manager_dependency": "\${helm_release.cert-manager.id}"
        }
      },
      "wait-for-certificate": {
        "depends_on": [
          "null_resource.create-tls-resources"
        ],
        "provisioner": [
          {
            "local-exec": {
              "command": "kubectl wait --for=condition=ready certificate zitadel-cert -n default --timeout=120s || true",
              "when": "create"
            }
          }
        ],
        "triggers": {
          "tls_resources_dependency": "\${null_resource.create-tls-resources.id}"
        }
      }
    }
  },
  "terraform": {
    "required_providers": {
      "helm": {
        "source": "helm",
        "version": "2.17.0"
      },
      "kubernetes": {
        "source": "kubernetes",
        "version": "2.38.0"
      },
      "null": {
        "source": "null",
        "version": "3.2.4"
      }
    }
  }
}"
`;
